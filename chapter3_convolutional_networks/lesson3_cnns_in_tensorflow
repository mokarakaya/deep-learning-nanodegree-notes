general formula to set new height and weight:
 new_height = (input_height - filter_height + 2 * P)/S + 1
 new_width = (input_width - filter_width + 2 * P)/S + 1

Convolutional Layers:
tf provides tf.nn.conv2d(), tf.nn.bias_add(), tf.nn.relu() functions to create your own convolutional layers.

strides:[batch:1, input_height:2, input_width:2, input_channels:1] (generally set to these values to use all channels and batches. it's generally a square.)

F_W = tf.Variable(tf.truncated_normal((2, 2, 1, 3))) # (height, width, input_depth, output_depth)
F_b = tf.Variable(tf.zeros(3)) # (output_depth)

Max Pooling Layers:
sets the max value of the filter. the benefit of max pooling is to reduce the size of the input and allow network to focus on only the most important elements.

CNNs in Tensorflow:
An example weights and biases:

# store weights & biases
weights = {
    'wc1': tf.Variable(tf.random_normal([5, 5, 1, 32])),
    'wc2': tf.Variable(tf.random_normal([5, 5, 32, 64])),
    'wd1': tf.Variable(tf.random_normal([7*7*64, 1024])),
    'out': tf.Variable(tf.random_normal([1024, n_classes]))}

biases = {
    'bc1': tf.Variable(tf.random_normal([32])),
    'bc2': tf.Variable(tf.random_normal([64])),
    'bd1': tf.Variable(tf.random_normal([1024])),
    'out': tf.Variable(tf.random_normal([n_classes]))}

TODO: Check the whole implementation again 
